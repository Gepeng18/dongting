/*
 * Copyright The Dongting Project
 *
 * The Dongting Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */
syntax = "proto3";
option java_package = "com.github.dtprj.dongting.raft";

message NodePingReq {
  fixed32 node_id = 1;
  fixed64 uuid_high = 2;
  fixed64 uuid_low = 3;
}
message NodePingResp {
  fixed32 node_id = 1;
  fixed64 uuid_high = 2;
  fixed64 uuid_low = 3;
}

message RaftPingReq {
  fixed32 group_id = 1;
  fixed32 node_id = 2;
  repeated fixed32 node_id_of_members = 3[packed = false];
  repeated fixed32 node_id_of_observers = 4[packed = false];
}
message RaftPingResp {
  fixed32 group_id = 1;
  fixed32 node_id = 2;
  repeated fixed32 node_id_of_members = 3[packed = false];
  repeated fixed32 node_id_of_observers = 4[packed = false];
}

message AppendEntriesReq {
  uint32 group_id = 1;
  uint32 term = 2;
  uint32 leader_id = 3;
  fixed64 prev_log_index = 4;
  uint32 prev_log_term = 5;
  repeated LogItem entries = 6;
  fixed64 leader_commit = 7;
}

message LogItem {
  uint32 type = 1;
  uint32 term = 2;
  fixed64 index = 3;
  uint32 prev_log_term = 4;
  fixed64 timestamp = 5;
  bytes data = 6;
}

message AppendEntriesResp {
  uint32 term = 1;
  uint32 success = 2;
  ///////////////////////////
  uint32 append_code = 3;
  uint32 max_log_term = 4;
  fixed64 max_log_index = 5;
}

message RequestVoteReq {
  uint32 group_id = 1;
  uint32 term = 2;
  uint32 candidate_id = 3;
  fixed64 last_log_index = 4;
  uint32 last_log_term = 5;
  uint32 pre_vote = 6;
}

message RequestVoteResp {
  uint32 term = 1;
  uint32 vote_granted = 2;
}

message InstallSnapshotReq {
  uint32 group_id = 1;
  uint32 term = 2;
  uint32 leader_id = 3;
  fixed64 last_included_index = 4;
  uint32 last_included_term = 5;
  fixed64 offset = 6;
  bytes data = 7;
  bool done = 8;
}

message InstallSnapshotResp {
  uint32 term = 1;
  bool success = 2;
}

message TransferLeaderReq {
  uint32 group_id = 1;
  uint32 term = 2;
  uint32 old_leader_id = 3;
  fixed64 log_index = 4;
}