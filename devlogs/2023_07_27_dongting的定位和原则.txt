项目的发起的时候，我在项目readme里面写道，dongting是一个raft/mq/config/rpc(low level)四合一引擎，零依赖，高性能，为什么是这四个模块呢，因为：
● rpc是所有分布式程序的基础，既然是0依赖就要自己实现low level rpc。
● 分布式领域，配置中心（config）也是必不可少的，在dongting中它要基于raft实现。
● raft实现了线性一致性，如果要构建金融级别的分布式系统，实现同城容灾，异地多活等，现在最好的选择就是基于raft来做。
● mq依赖配置中心，消息数据写入后不可更新，直接使用raft log作为消息日志也是实现分布式mq的一种选择。所以，mq就成为dongting在config/raft上构建的一个业务应用案例。但mq不一定要选择3副本以上的raft实现，也可以仅使用raft（配置中心）选主，然后使用2副本主备模式。
● 进一步，项目刚开始的时候，我认为rpc和mq本质上有共同之处，mq可以看做是一对多的且不要求返回值的rpc调用，high level rpc可以和mq可以共用一个实现。比如可以基于mq的能力，实现rpc的流量录制和回放；为了节省资源，也可以不对rpc做任何日志记录，按需打开。现在我的观点仍然没有改变，只是要实现这个有些太遥远了，high level rpc，光零依赖实现序列化就够喝一壶了（现在的low level rpc有序列化，但需要开发者自己实现编解码，让业务用户使用不现实），所以这个不作为当前的目标。
总而言之，这几个模块是有紧密联系的，并且可以进一步扩展。
我的想法是dongting作为基础组件的基础组件，一定要精练，不会什么需求都做，但是核心能力一定要做好，稳定性要做好，扩展性要强。对于技术实力较弱的公司，一些组件（比如config、mq）可以直接拿来用，满足绝大部分需求；对于有能力的公司，比如一些大厂，dongting也非常适合拿去做二次定制。
这样的定位是因为个人开发精力有限，要有取舍，更是因为我认为如果什么需求都做，一定会臃肿，最后什么都做不好。
下面以dongting-raft实现来举一个例子，来阐明做什么，不做什么的逻辑。
dongting完整实现了raft论文中的全部内容，状态机留给用户来实现，所以它是一个通用的raft框架。
我基于它实现了一个最简单的KV系统，叫dtkv（以后功能还会扩展），这已经可以作为一个简单配置中心了。用户也可以实现自己的状态机来实现别的功能。
raft log模块也是可以替换的，目前我提供了一个默认的基于文件的日志实现，同时还提供了一个纯内存的实现（可用于测试或某些特殊场景），深度定制用户也可以提供自己的实现，比如我前面文章提过的mmap实现。
出于运维的需要，raft group的成员可能会变更。dongting的raft实现基于论文中的共同一致方式来实现变更，它是两阶段的。raft server和client都提供了变更的api，遵循严格的变更顺序，配合转让leader的api，可以做到运行时平滑的变更，一个rpc请求也不会失败，server和client都不需要重启，但server和client都需要做二阶段变更，client也可以定时刷新配置，发现配置变更后自动调用配置更新的api。
dongting没有提供raft成员变更后从server自动通知到client的能力，这个理论上可以做，但通知无法100%可靠的送达，如果client正好断网，然后这期间raft成员从A、B、C变成了D、E、F（没有交集），这样client就再也无法连上raft集群了。自动通知也许能做到很多个9的可靠性，但达不到100%就是还要用别的方式兜底，所以干脆不做了（好像etcd也是这么搞的）。
一个raft group的容量是无法水平扩展的，所以dongting实现了multi-raft，通过运行多个raft group，来实现分片，在dongting中，多个raft group共享RaftServer实例，共享TCP连接，你可以有N个服务器（Node），上面运行M个raft group，N（通常要大于等于3）和M的数量都是任意的，并且可以在运行时动态增加（上面也提到了不需要重启服务器和客户端）。可以看到，很多分布式产品都是这样做的，典型的例子就是tikv/tidb。dongting作为通用raft框架，你也可以在上面构建出类似的产品出来，这非常有想象力，这也是我前面提到过的，dongting要做基础组件的基础组件。
假设现在有N个服务器，M个group，那么这些group如何分布在服务器上，能够让服务器的CPU、内存、存储得到均衡的利用呢？这个自动调度策略dongting是不打算做的，因为这没有通用的解法，dongting只提供api。有这方面需求的用户，自然有能力实现这个调度系统。对大部分用户来说，静态的配置，可能就满足需求了，如果需要进行变更，也可以通过人工方式调用来进行。
最后，简单介绍一下项目的当前进展。到目前为止（2023年7月27日），上面提到的raft特性已经全部完成，功能上只需要做少量一些优化了。不过raft模块还没有做任何测试，因此也不可用，以前做rpc的时候曾经把单元测试覆盖率做到百分之八九十，做完raft现在只剩33%，预计测试会花挺长时间（一定要做稳定），测试完成以后，dongting的第一个有实用意义的版本就能发布了。也还有一些其它的TODO，比如现在rpc还没有实现认证握手和server push，dtkv需要演化成一个功能基本完备的配置中心等，慢慢来吧。
